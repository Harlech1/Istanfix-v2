const sqlite3 = require('sqlite3').verbose();
const DB_PATH = './istanfix.db'; // Database file will be created in the root directory

// Connect to SQLite database. 
// The database will be created if it doesn't exist.
const db = new sqlite3.Database(DB_PATH, (err) => {
    if (err) {
        console.error('Error opening database', err.message);
    } else {
        console.log('Connected to the Istanfix SQLite database.');
        db.serialize(() => {
            createUsersTable();
            createCategoriesTable();
            createDistrictsTable();
            createNeighborhoodsTable();
            createReportsTable();
            createCommentsTable();
            enableForeignKeys();
            populateDefaultCategories();
            populateDefaultDistricts();
            populateDefaultNeighborhoods();
        });
    }
});

function enableForeignKeys() {
    db.run("PRAGMA foreign_keys = ON;", (err) => {
        if (err) {
            console.error("Error enabling foreign keys:", err.message);
        } else {
            console.log("Foreign key support enabled.");
        }
    });
}

function createUsersTable() {
    const createTableSql = `
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            email TEXT NOT NULL UNIQUE,
            hashed_password TEXT NOT NULL,
            role TEXT NOT NULL DEFAULT 'user',
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        );
    `;
    db.run(createTableSql, (err) => {
        if (err) {
            console.error('Error creating users table', err.message);
        } else {
            console.log('Users table created or already exists.');
        }
    });
}

function createCategoriesTable() {
    const createTableSql = `
        CREATE TABLE IF NOT EXISTS categories (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL UNIQUE,
            icon TEXT,
            description TEXT
        );
    `;
    db.run(createTableSql, (err) => {
        if (err) {
            console.error('Error creating categories table', err.message);
        } else {
            console.log('Categories table created or already exists.');
        }
    });
}

function createDistrictsTable() {
    const createTableSql = `
        CREATE TABLE IF NOT EXISTS districts (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL UNIQUE,
            area_code TEXT
        );
    `;
    db.run(createTableSql, (err) => {
        if (err) {
            console.error('Error creating districts table', err.message);
        } else {
            console.log('Districts table created or already exists.');
        }
    });
}

function createNeighborhoodsTable() {
    const createTableSql = `
        CREATE TABLE IF NOT EXISTS neighborhoods (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            district_id INTEGER NOT NULL,
            postal_code TEXT,
            -- CASCADE: ƒ∞l√ße silindiƒüinde o il√ßeye ait t√ºm mahalleler otomatik olarak silinir
            -- Bu sayede veritabanƒ±nda sahipsiz mahalle kaydƒ± kalmaz ve tutarlƒ±lƒ±k korunur
            FOREIGN KEY (district_id) REFERENCES districts(id) ON DELETE CASCADE,
            UNIQUE(name, district_id)
        );
    `;
    db.run(createTableSql, (err) => {
        if (err) {
            console.error('Error creating neighborhoods table', err.message);
        } else {
            console.log('Neighborhoods table created or already exists.');
        }
    });
}

function createReportsTable() {
    const createTableSql = `
        CREATE TABLE IF NOT EXISTS reports (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            category_id INTEGER NOT NULL,
            district_id INTEGER NOT NULL,
            neighborhood_id INTEGER,
            address TEXT NOT NULL,
            description TEXT NOT NULL,
            latitude REAL,
            longitude REAL,
            image_path TEXT,                         
            status TEXT NOT NULL DEFAULT 'open',
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            user_id INTEGER,                          -- Foreign key to the users table
            FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE SET NULL, -- If user is deleted, set user_id to NULL
            FOREIGN KEY (category_id) REFERENCES categories(id) ON DELETE RESTRICT, -- Prevent category deletion if reports exist
            FOREIGN KEY (district_id) REFERENCES districts(id) ON DELETE RESTRICT, -- Prevent district deletion if reports exist
            FOREIGN KEY (neighborhood_id) REFERENCES neighborhoods(id) ON DELETE SET NULL -- If neighborhood is deleted, set neighborhood_id to NULL
        );
    `;

    db.run(createTableSql, (err) => {
        if (err) {
            console.error('Error creating reports table', err.message);
        } else {
            console.log('Reports table (re)created or already exists with user_id foreign key.');
            // Trigger to update `updated_at` on row update (remains the same)
            const createTriggerSql = `
                CREATE TRIGGER IF NOT EXISTS update_reports_updated_at
                AFTER UPDATE ON reports
                FOR EACH ROW
                BEGIN
                    UPDATE reports SET updated_at = CURRENT_TIMESTAMP WHERE id = OLD.id;
                END;
            `;
            db.run(createTriggerSql, (triggerErr) => {
                if (triggerErr) {
                    console.error('Error creating updated_at trigger for reports', triggerErr.message);
                } else {
                    console.log('updated_at trigger for reports table created or already exists.');
                }
            });
        }
    });
}

function createCommentsTable() {
    // Yorumlar tablosu - CASCADE kullanƒ±mƒ±:
    // 1. Bir rapor silindiƒüinde, o rapora ait t√ºm yorumlar otomatik silinir
    // 2. Bir kullanƒ±cƒ± silindiƒüinde, o kullanƒ±cƒ±nƒ±n t√ºm yorumlarƒ± otomatik silinir
    // Bu yapƒ±, veritabanƒ±nda "sahipsiz" yorum kalmasƒ±nƒ± √∂nler ve veri b√ºt√ºnl√ºƒü√ºn√º korur
    const createTableSql = `
        CREATE TABLE IF NOT EXISTS comments (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            report_id INTEGER NOT NULL,
            user_id INTEGER NOT NULL,
            content TEXT NOT NULL,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (report_id) REFERENCES reports(id) ON DELETE CASCADE,
            FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
        );
    `;
    db.run(createTableSql, (err) => {
        if (err) {
            console.error('Error creating comments table', err.message);
        } else {
            console.log('Comments table created or already exists.');
        }
    });
}

function populateDefaultCategories() {
    // Check if categories table is empty
    db.get("SELECT COUNT(*) as count FROM categories", (err, row) => {
        if (err) {
            console.error('Error checking categories count', err.message);
            return;
        }
        
        // Only populate if no categories exist
        if (row.count === 0) {
            const categories = [
                { name: 'pothole', icon: 'üï≥Ô∏è', description: 'Road damage like holes and cracks' },
                { name: 'streetlight', icon: 'üí°', description: 'Issues with street lighting' },
                { name: 'trash', icon: 'üóëÔ∏è', description: 'Garbage and waste issues' },
                { name: 'bench', icon: 'ü™ë', description: 'Problems with public seating' },
                { name: 'water', icon: 'üíß', description: 'Water-related issues like leaks or flooding' },
                { name: 'sidewalk', icon: 'üö∂', description: 'Damaged or blocked sidewalks' },
                { name: 'other', icon: 'üîß', description: 'Other infrastructure issues' }
            ];
            
            const insertSql = 'INSERT INTO categories (name, icon, description) VALUES (?, ?, ?)';
            
            categories.forEach(category => {
                db.run(insertSql, [category.name, category.icon, category.description], (err) => {
                    if (err) {
                        console.error(`Error inserting category ${category.name}:`, err.message);
                    } else {
                        console.log(`Category ${category.name} inserted successfully.`);
                    }
                });
            });
        }
    });
}

function populateDefaultDistricts() {
    // Check if districts table is empty
    db.get("SELECT COUNT(*) as count FROM districts", (err, row) => {
        if (err) {
            console.error('Error checking districts count', err.message);
            return;
        }
        
        // Only populate if no districts exist
        if (row.count === 0) {
            const districts = [
                { name: 'Adalar', area_code: '34970' },
                { name: 'Arnavutk√∂y', area_code: '34275' },
                { name: 'Ata≈üehir', area_code: '34758' },
                { name: 'Avcƒ±lar', area_code: '34310' },
                { name: 'Baƒücƒ±lar', area_code: '34200' },
                { name: 'Bah√ßelievler', area_code: '34180' },
                { name: 'Bakƒ±rk√∂y', area_code: '34142' },
                { name: 'Ba≈üak≈üehir', area_code: '34480' },
                { name: 'Bayrampa≈üa', area_code: '34045' },
                { name: 'Be≈üikta≈ü', area_code: '34330' },
                { name: 'Beykoz', area_code: '34820' },
                { name: 'Beylikd√ºz√º', area_code: '34520' },
                { name: 'Beyoƒülu', area_code: '34420' },
                { name: 'B√ºy√ºk√ßekmece', area_code: '34550' },
                { name: '√áatalca', area_code: '34540' },
                { name: '√áekmek√∂y', area_code: '34782' },
                { name: 'Esenler', area_code: '34220' },
                { name: 'Esenyurt', area_code: '34510' },
                { name: 'Ey√ºpsultan', area_code: '34050' },
                { name: 'Fatih', area_code: '34080' },
                { name: 'Gaziosmanpa≈üa', area_code: '34245' },
                { name: 'G√ºng√∂ren', area_code: '34160' },
                { name: 'Kadƒ±k√∂y', area_code: '34710' },
                { name: 'Kaƒüƒ±thane', area_code: '34410' },
                { name: 'Kartal', area_code: '34860' },
                { name: 'K√º√ß√ºk√ßekmece', area_code: '34290' },
                { name: 'Maltepe', area_code: '34840' },
                { name: 'Pendik', area_code: '34890' },
                { name: 'Sancaktepe', area_code: '34785' },
                { name: 'Sarƒ±yer', area_code: '34460' },
                { name: 'Silivri', area_code: '34570' },
                { name: 'Sultanbeyli', area_code: '34935' },
                { name: 'Sultangazi', area_code: '34260' },
                { name: '≈ûile', area_code: '34980' },
                { name: '≈ûi≈üli', area_code: '34360' },
                { name: 'Tuzla', area_code: '34940' },
                { name: '√úmraniye', area_code: '34760' },
                { name: '√úsk√ºdar', area_code: '34660' },
                { name: 'Zeytinburnu', area_code: '34020' }
            ];
            
            const insertSql = 'INSERT INTO districts (name, area_code) VALUES (?, ?)';
            
            districts.forEach(district => {
                db.run(insertSql, [district.name, district.area_code], (err) => {
                    if (err) {
                        console.error(`Error inserting district ${district.name}:`, err.message);
                    } else {
                        console.log(`District ${district.name} inserted successfully.`);
                    }
                });
            });
        }
    });
}

function populateDefaultNeighborhoods() {
    // Check if neighborhoods table is empty
    db.get("SELECT COUNT(*) as count FROM neighborhoods", (err, row) => {
        if (err) {
            console.error('Error checking neighborhoods count', err.message);
            return;
        }
        
        // Only populate if no neighborhoods exist
        if (row.count === 0) {
            // Get district IDs first to ensure we reference correct foreign keys
            db.all("SELECT id, name FROM districts", [], (err, districts) => {
                if (err) {
                    console.error('Error fetching districts for neighborhood population', err.message);
                    return;
                }
                
                // Create a map of district names to IDs for easy reference
                const districtMap = {};
                districts.forEach(district => {
                    districtMap[district.name] = district.id;
                });
                
                // Data from https://atlasbig.com.tr/istanbulun-mahalleleri
                
                // K√º√ß√ºk√ßekmece mahalleleri
                if (districtMap['K√º√ß√ºk√ßekmece']) {
                    const kucukcekmeceMahalleleri = [
                        { name: 'Atakent', postal_code: '34307' },
                        { name: 'Halkalƒ± Merkez', postal_code: '34303' },
                        { name: 'ƒ∞n√∂n√º', postal_code: '34295' },
                        { name: 'Kanarya', postal_code: '34290' },
                        { name: 'Mehmet Akif', postal_code: '34307' },
                        { name: 'Cumhuriyet', postal_code: '34290' },
                        { name: 'Atat√ºrk', postal_code: '34303' },
                        { name: 'ƒ∞stasyon', postal_code: '34295' }
                    ];
                    insertNeighborhoods(kucukcekmeceMahalleleri, districtMap['K√º√ß√ºk√ßekmece']);
                }
                
                // Bah√ßelievler mahalleleri
                if (districtMap['Bah√ßelievler']) {
                    const bahcelievlerMahalleleri = [
                        { name: 'Zafer', postal_code: '34180' },
                        { name: 'Kocasinan Merkez', postal_code: '34186' },
                        { name: 'Soƒüanlƒ±', postal_code: '34182' },
                        { name: 'Siyavu≈üpa≈üa', postal_code: '34182' },
                        { name: 'Bah√ßelievler', postal_code: '34188' },
                        { name: '≈ûirinevler', postal_code: '34188' },
                        { name: 'H√ºrriyet', postal_code: '34192' },
                        { name: 'Cumhuriyet', postal_code: '34196' }
                    ];
                    insertNeighborhoods(bahcelievlerMahalleleri, districtMap['Bah√ßelievler']);
                }
                
                // Beylikd√ºz√º mahalleleri
                if (districtMap['Beylikd√ºz√º']) {
                    const beylikduzuMahalleleri = [
                        { name: 'Adnan Kahveci', postal_code: '34528' },
                        { name: 'Barƒ±≈ü', postal_code: '34520' },
                        { name: 'Yakuplu', postal_code: '34524' },
                        { name: 'B√ºy√ºk≈üehir', postal_code: '34500' },
                        { name: 'Cumhuriyet', postal_code: '34500' },
                        { name: 'Marmara', postal_code: '34520' }
                    ];
                    insertNeighborhoods(beylikduzuMahalleleri, districtMap['Beylikd√ºz√º']);
                }
                
                // Maltepe mahalleleri
                if (districtMap['Maltepe']) {
                    const maltepeMahalleleri = [
                        { name: 'Z√ºmr√ºtevler', postal_code: '34852' },
                        { name: 'Fƒ±ndƒ±klƒ±', postal_code: '34844' },
                        { name: 'Baƒülarba≈üƒ±', postal_code: '34841' },
                        { name: 'Cevizli', postal_code: '34846' },
                        { name: 'Altƒ±ntepe', postal_code: '34840' },
                        { name: 'Feyzullah', postal_code: '34843' }
                    ];
                    insertNeighborhoods(maltepeMahalleleri, districtMap['Maltepe']);
                }
                
                // Ba≈üak≈üehir mahalleleri
                if (districtMap['Ba≈üak≈üehir']) {
                    const basaksehirMahalleleri = [
                        { name: 'Kayaba≈üƒ±', postal_code: '34494' },
                        { name: 'Ba≈üak', postal_code: '34480' },
                        { name: 'Ba≈üak≈üehir', postal_code: '34480' },
                        { name: 'G√ºvercintepe', postal_code: '34307' },
                        { name: 'Bah√ße≈üehir 2. Kƒ±sƒ±m', postal_code: '34488' },
                        { name: 'Bah√ße≈üehir 1. Kƒ±sƒ±m', postal_code: '34488' }
                    ];
                    insertNeighborhoods(basaksehirMahalleleri, districtMap['Ba≈üak≈üehir']);
                }
                
                // Gaziosmanpa≈üa mahalleleri
                if (districtMap['Gaziosmanpa≈üa']) {
                    const gaziosmanpasaMahalleleri = [
                        { name: 'Karadeniz', postal_code: '34255' },
                        { name: 'Barbaros Hayrettin Pa≈üa', postal_code: '34250' },
                        { name: 'Kazƒ±m Karabekir', postal_code: '34250' },
                        { name: 'Karayollarƒ±', postal_code: '34255' },
                        { name: 'Mevlana', postal_code: '34255' },
                        { name: 'Fevzi √áakmak', postal_code: '34245' }
                    ];
                    insertNeighborhoods(gaziosmanpasaMahalleleri, districtMap['Gaziosmanpa≈üa']);
                }
                
                // Sultangazi mahalleleri
                if (districtMap['Sultangazi']) {
                    const sultangaziMahalleleri = [
                        { name: '50. Yƒ±l', postal_code: '34265' },
                        { name: 'Esentepe', postal_code: '34270' },
                        { name: 'Cebeci', postal_code: '34270' },
                        { name: 'ƒ∞smetpa≈üa', postal_code: '34265' },
                        { name: 'Yunus Emre', postal_code: '34260' },
                        { name: 'Uƒüur Mumcu', postal_code: '34265' },
                        { name: 'Sultan√ßiftliƒüi', postal_code: '34265' }
                    ];
                    insertNeighborhoods(sultangaziMahalleleri, districtMap['Sultangazi']);
                }
                
                // Avcƒ±lar mahalleleri
                if (districtMap['Avcƒ±lar']) {
                    const avcilarMahalleleri = [
                        { name: 'Ye≈üilkent', postal_code: '34517' },
                        { name: 'Cihangir', postal_code: '34310' },
                        { name: 'Tahtakale', postal_code: '34320' },
                        { name: 'Denizk√∂≈ükler', postal_code: '34315' },
                        { name: 'G√ºm√º≈üpala', postal_code: '34320' },
                        { name: 'Ambarlƒ±', postal_code: '34315' }
                    ];
                    insertNeighborhoods(avcilarMahalleleri, districtMap['Avcƒ±lar']);
                }
                
                // Pendik mahalleleri
                if (districtMap['Pendik']) {
                    const pendikMahalleleri = [
                        { name: 'Kavakpƒ±nar', postal_code: '34899' },
                        { name: 'Yeni≈üehir', postal_code: '34893' },
                        { name: 'Kaynarca', postal_code: '34896' },
                        { name: 'Velibaba', postal_code: '34896' },
                        { name: 'G√ºzelyalƒ±', postal_code: '34903' },
                        { name: 'Esenyalƒ±', postal_code: '34903' }
                    ];
                    insertNeighborhoods(pendikMahalleleri, districtMap['Pendik']);
                }
                
                // Baƒücƒ±lar mahalleleri
                if (districtMap['Baƒücƒ±lar']) {
                    const bagcilarMahalleleri = [
                        { name: 'Demirkapƒ±', postal_code: '34203' },
                        { name: '15 Temmuz', postal_code: '34204' },
                        { name: '100. Yƒ±l', postal_code: '34203' },
                        { name: 'G√ºne≈üli', postal_code: '34210' },
                        { name: 'Fatih', postal_code: '34204' },
                        { name: 'Kirazlƒ±', postal_code: '34200' },
                        { name: 'Yƒ±ldƒ±ztepe', postal_code: '34203' },
                        { name: 'G√∂ztepe', postal_code: '34214' }
                    ];
                    insertNeighborhoods(bagcilarMahalleleri, districtMap['Baƒücƒ±lar']);
                }
                
                // Kartal mahalleleri
                if (districtMap['Kartal']) {
                    const kartalMahalleleri = [
                        { name: 'H√ºrriyet', postal_code: '34876' },
                        { name: 'Uƒüur Mumcu', postal_code: '34880' },
                        { name: 'Yukarƒ±', postal_code: '34870' },
                        { name: 'Topselvi', postal_code: '34873' },
                        { name: 'Kordonboyu', postal_code: '34865' },
                        { name: 'Orhantepe', postal_code: '34865' }
                    ];
                    insertNeighborhoods(kartalMahalleleri, districtMap['Kartal']);
                }
                
                // √úmraniye mahalleleri
                if (districtMap['√úmraniye']) {
                    const umraniyeMahalleleri = [
                        { name: 'ƒ∞stiklal', postal_code: '34760' },
                        { name: 'Armaƒüanevler', postal_code: '34764' },
                        { name: '√áakmak', postal_code: '34774' },
                        { name: 'Tepe√ºst√º', postal_code: '34771' },
                        { name: 'Atat√ºrk', postal_code: '34761' },
                        { name: 'Site', postal_code: '34760' }
                    ];
                    insertNeighborhoods(umraniyeMahalleleri, districtMap['√úmraniye']);
                }
                
                // Esenler mahalleleri
                if (districtMap['Esenler']) {
                    const esenlerMahalleleri = [
                        { name: 'Turgut Reis', postal_code: '34235' },
                        { name: 'Fatih', postal_code: '34230' },
                        { name: 'Oru√ßreis', postal_code: '34230' },
                        { name: 'Nine Hatun', postal_code: '34220' },
                        { name: 'Menderes', postal_code: '34220' },
                        { name: 'Kemer', postal_code: '34220' }
                    ];
                    insertNeighborhoods(esenlerMahalleleri, districtMap['Esenler']);
                }
                
                // Bayrampa≈üa mahalleleri
                if (districtMap['Bayrampa≈üa']) {
                    const bayrampasaMahalleleri = [
                        { name: 'Yƒ±ldƒ±rƒ±m', postal_code: '34035' },
                        { name: 'Kartaltepe', postal_code: '34040' },
                        { name: 'Muratpa≈üa', postal_code: '34040' },
                        { name: 'Ortabayƒ±r', postal_code: '34035' },
                        { name: 'ƒ∞smetpa≈üa', postal_code: '34045' },
                        { name: 'Terazidere', postal_code: '34035' }
                    ];
                    insertNeighborhoods(bayrampasaMahalleleri, districtMap['Bayrampa≈üa']);
                }
                
                // G√ºng√∂ren mahalleleri
                if (districtMap['G√ºng√∂ren']) {
                    const gungorenMahalleleri = [
                        { name: 'G√ºne≈ütepe', postal_code: '34164' },
                        { name: 'Gen√ßosman', postal_code: '34165' },
                        { name: 'Merkez', postal_code: '34160' },
                        { name: 'Tozkoparan', postal_code: '34160' },
                        { name: 'Akƒ±ncƒ±lar', postal_code: '34160' },
                        { name: 'Haznedar', postal_code: '34160' }
                    ];
                    insertNeighborhoods(gungorenMahalleleri, districtMap['G√ºng√∂ren']);
                }
                
                // Ey√ºpsultan mahalleleri
                if (districtMap['Ey√ºpsultan']) {
                    const eyupsultanMahalleleri = [
                        { name: 'Ak≈üemsettin', postal_code: '34075' },
                        { name: 'Ye≈üilpƒ±nar', postal_code: '34065' },
                        { name: 'Alibeyk√∂y', postal_code: '34060' },
                        { name: 'G√∂kt√ºrk', postal_code: '34077' },
                        { name: 'G√ºzeltepe', postal_code: '34060' },
                        { name: 'ƒ∞slambey', postal_code: '34055' }
                    ];
                    insertNeighborhoods(eyupsultanMahalleleri, districtMap['Ey√ºpsultan']);
                }
                
                // Kaƒüƒ±thane mahalleleri
                if (districtMap['Kaƒüƒ±thane']) {
                    const kagithaneMahalleleri = [
                        { name: 'Hamidiye', postal_code: '34408' },
                        { name: 'Merkez', postal_code: '34406' },
                        { name: '√áeliktepe', postal_code: '34413' },
                        { name: 'Talatpa≈üa', postal_code: '34400' },
                        { name: 'G√ºrsel', postal_code: '34400' },
                        { name: 'Harmantepe', postal_code: '34408' }
                    ];
                    insertNeighborhoods(kagithaneMahalleleri, districtMap['Kaƒüƒ±thane']);
                }
                
                // Zeytinburnu mahalleleri
                if (districtMap['Zeytinburnu']) {
                    const zeytinburnuMahalleleri = [
                        { name: 'Telsiz', postal_code: '34020' },
                        { name: 'Merkez Efendi', postal_code: '34015' },
                        { name: 'Seyitnizam', postal_code: '34015' },
                        { name: 'Ye≈üiltepe', postal_code: '34025' },
                        { name: '√áƒ±rpƒ±cƒ±', postal_code: '34025' },
                        { name: 'Be≈ütelsiz', postal_code: '34020' }
                    ];
                    insertNeighborhoods(zeytinburnuMahalleleri, districtMap['Zeytinburnu']);
                }
                
                // Bakƒ±rk√∂y mahalleleri
                if (districtMap['Bakƒ±rk√∂y']) {
                    const bakirk√∂yMahalleleri = [
                        { name: 'Kartaltepe', postal_code: '34142' },
                        { name: 'Cevizlik', postal_code: '34142' },
                        { name: 'Yenimahalle', postal_code: '34142' },
                        { name: 'Sakƒ±zaƒüacƒ±', postal_code: '34142' },
                        { name: 'Atak√∂y 1. Kƒ±sƒ±m', postal_code: '34158' },
                        { name: 'Zeytinlik', postal_code: '34140' }
                    ];
                    insertNeighborhoods(bakirk√∂yMahalleleri, districtMap['Bakƒ±rk√∂y']);
                }
                
                // Be≈üikta≈ü mahalleleri
                if (districtMap['Be≈üikta≈ü']) {
                    const besiktasMahalleleri = [
                        { name: 'Arnavutk√∂y', postal_code: '34345' },
                        { name: 'Bebek', postal_code: '34342' },
                        { name: 'Levent', postal_code: '34330' },
                        { name: 'Ortak√∂y', postal_code: '34347' },
                        { name: 'Etiler', postal_code: '34337' },
                        { name: 'Sinanpa≈üa', postal_code: '34353' },
                        { name: 'T√ºrkali', postal_code: '34357' },
                        { name: 'Ulus', postal_code: '34340' }
                    ];
                    insertNeighborhoods(besiktasMahalleleri, districtMap['Be≈üikta≈ü']);
                }
                
                // Kadƒ±k√∂y mahalleleri
                if (districtMap['Kadƒ±k√∂y']) {
                    const kadikoyMahalleleri = [
                        { name: 'Caferaƒüa', postal_code: '34710' },
                        { name: 'Fenerbah√ße', postal_code: '34726' },
                        { name: 'G√∂ztepe', postal_code: '34730' },
                        { name: 'Ko≈üuyolu', postal_code: '34718' },
                        { name: 'Moda', postal_code: '34710' },
                        { name: 'Suadiye', postal_code: '34740' },
                        { name: 'Erenk√∂y', postal_code: '34738' },
                        { name: 'Caddebostan', postal_code: '34728' },
                        { name: 'Bostancƒ±', postal_code: '34744' },
                        { name: 'Kozyataƒüƒ±', postal_code: '34742' }
                    ];
                    insertNeighborhoods(kadikoyMahalleleri, districtMap['Kadƒ±k√∂y']);
                }
                
                // Fatih mahalleleri
                if (districtMap['Fatih']) {
                    const fatihMahalleleri = [
                        { name: 'Sultanahmet', postal_code: '34122' },
                        { name: '√áar≈üamba', postal_code: '34083' },
                        { name: 'Karag√ºmr√ºk', postal_code: '34091' },
                        { name: 'Vefa', postal_code: '34134' },
                        { name: 'Zeyrek', postal_code: '34083' },
                        { name: 'Aksaray', postal_code: '34096' },
                        { name: 'Kocamustafapa≈üa', postal_code: '34098' },
                        { name: 'Fƒ±ndƒ±kzade', postal_code: '34093' },
                        { name: '≈ûehremini', postal_code: '34104' },
                        { name: 'Cerrahpa≈üa', postal_code: '34098' }
                    ];
                    insertNeighborhoods(fatihMahalleleri, districtMap['Fatih']);
                }
                
                // ≈ûile mahalleleri - az n√ºfuslu il√ßelerden
                if (districtMap['≈ûile']) {
                    const sileMahalleleri = [
                        { name: 'Deƒüirmen√ßayƒ±rƒ±', postal_code: '34980' },
                        { name: 'Yenik√∂y', postal_code: '34980' },
                        { name: 'Ak√ßakese', postal_code: '34980' },
                        { name: 'Satmazlƒ±', postal_code: '34980' },
                        { name: '√úvezli', postal_code: '34980' }
                    ];
                    insertNeighborhoods(sileMahalleleri, districtMap['≈ûile']);
                }
                
                // Adalar mahalleleri - az n√ºfuslu il√ßelerden
                if (districtMap['Adalar']) {
                    const adalarMahalleleri = [
                        { name: 'Burgazada', postal_code: '34975' },
                        { name: 'B√ºy√ºkada', postal_code: '34970' },
                        { name: 'Heybeliada', postal_code: '34973' },
                        { name: 'Kƒ±nalƒ±ada', postal_code: '34976' }
                    ];
                    insertNeighborhoods(adalarMahalleleri, districtMap['Adalar']);
                }
                
                // Sarƒ±yer mahalleleri
                if (districtMap['Sarƒ±yer']) {
                    const sariyerMahalleleri = [
                        { name: 'Maslak', postal_code: '34398' },
                        { name: 'Bah√ßek√∂y', postal_code: '34473' },
                        { name: 'Rumelihisarƒ±', postal_code: '34470' },
                        { name: 'Emirgan', postal_code: '34467' },
                        { name: 'Tarabya', postal_code: '34457' },
                        { name: 'ƒ∞stinye', postal_code: '34460' }
                    ];
                    insertNeighborhoods(sariyerMahalleleri, districtMap['Sarƒ±yer']);
                }
                
                // Beyoƒülu mahalleleri
                if (districtMap['Beyoƒülu']) {
                    const beyogluMahalleleri = [
                        { name: 'Cihangir', postal_code: '34433' },
                        { name: 'Galata', postal_code: '34421' },
                        { name: 'Taksim', postal_code: '34437' },
                        { name: 'Tarlaba≈üƒ±', postal_code: '34435' },
                        { name: 'Kasƒ±mpa≈üa', postal_code: '34440' },
                        { name: 'Tomtom', postal_code: '34433' }
                    ];
                    insertNeighborhoods(beyogluMahalleleri, districtMap['Beyoƒülu']);
                }
                
                // Tuzla mahalleleri
                if (districtMap['Tuzla']) {
                    const tuzlaMahalleleri = [
                        { name: 'Aydƒ±nlƒ±', postal_code: '34947' },
                        { name: 'Mimar Sinan', postal_code: '34940' },
                        { name: 'Postane', postal_code: '34940' },
                        { name: 'ƒ∞√ßmeler', postal_code: '34947' },
                        { name: 'Aydƒ±ntepe', postal_code: '34947' },
                        { name: 'Yayla', postal_code: '34940' }
                    ];
                    insertNeighborhoods(tuzlaMahalleleri, districtMap['Tuzla']);
                }
                
                console.log('Neighborhoods populated successfully with data from AtlasBig.com.tr');
            });
        }
    });
}

function insertNeighborhoods(neighborhoods, districtId) {
    const insertSql = 'INSERT INTO neighborhoods (name, district_id, postal_code) VALUES (?, ?, ?)';
    
    neighborhoods.forEach(neighborhood => {
        db.run(insertSql, [neighborhood.name, districtId, neighborhood.postal_code], (err) => {
            if (err) {
                console.error(`Error inserting neighborhood ${neighborhood.name}:`, err.message);
            } else {
                console.log(`Neighborhood ${neighborhood.name} inserted successfully.`);
            }
        });
    });
}

module.exports = db; 